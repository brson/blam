use std::str::FromStr;
use crate::parser::ast::{Schema, Relation, Table, Join, View, TableColumn, TableColumnProp, Path};

grammar;

pub Schema: Schema = {
    <r:Relation*> => Schema {
        rels: r,
    }
};

pub Relation: Relation = {
    Table => Relation::Table(<>),
    Join => Relation::Join(<>),
    View => Relation::View(<>),
}

pub Table: Table = {
    "table" <n:Name> <c:TableColumns> => Table {
        name: n,
        columns: c,
    }
}

pub TableColumns: Vec<TableColumn> = {
    "{" <c:(<TableColumn> ",")*> "}" => c,
}

pub TableColumn: TableColumn = {
    <p:TableColumnProp?> <n:Name> ":" <t: Type> => TableColumn {
        name: n,
        type_: t,
        prop: p,
    }
}

pub TableColumnProp: TableColumnProp = {
    "#[" "unique_key" "]" => TableColumnProp::UniqueKey,
    "#[" "foreign_key" "(" <p:Path> ")" "]" => TableColumnProp::ForeignKey(p),
}

pub Join: Join = {
    "join" => panic!(),
}

pub View: View = {
    "view" => panic!(),
}

pub Name: String = {
    <AlphaNumeric> => <>,
}

pub Type: String = {
    <AlphaNumeric> => <>,
}

pub AlphaNumeric: String = {
    <r"[[::alpha:]][[:alnum:]]*"> => <>.to_string(),
}

pub Path: Path = {
    <t: Name> "." <c: Name> => Path {
        table: t,
        column: c,
    }
}
