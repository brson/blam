use std::str::FromStr;
use crate::ast::{
    Schema, Relation, Table, Join, View, TableColumn,
    TableColumnProp, Path, Type, JoinWith, JoinWhere,
    JoinPreds, ViewPreds, ViewColumn,
};

grammar;

pub Schema: Schema = {
    <r:Relation*> => Schema {
        rels: r,
    }
};

pub Relation: Relation = {
    Table => Relation::Table(<>),
    Join => Relation::Join(<>),
    View => Relation::View(<>),
}

pub Table: Table = {
    "table" <n:Name> <c:TableColumns> => Table {
        name: n,
        columns: c,
    }
}

pub TableColumns: Vec<TableColumn> = {
    "{" <c:(<TableColumn> ",")*> "}" => c,
}

pub TableColumn: TableColumn = {
    <p:TableColumnProp?> <n:Name> ":" <t: Type> => TableColumn {
        name: n,
        type_: t,
        prop: p,
    }
}

pub TableColumnProp: TableColumnProp = {
    "#[" "unique_key" "]" => TableColumnProp::UniqueKey,
    "#[" "foreign_key" "(" <p:Path> ")" "]" => TableColumnProp::ForeignKey(p),
}

pub Join: Join = {
    "join" <n:Name> <p:JoinPreds> => Join {
        name: n,
        from: p.from,
        with: p.with,
        where_: p.where_,
    }
}

pub JoinPreds: JoinPreds = {
    "{" "from" <f:Name> "," <w:(<JoinWith> ",")+> <wh:(<JoinWhere> ",")+> "}" => {
        JoinPreds {
            from: f,
            with: w,
            where_: wh,
        }
    }
}

pub JoinWith: JoinWith = {
    "with" <n:Name> "as" <rn:Name> => JoinWith {
        name: n,
        rename: Some(rn),
    },
    "with" <n:Name> => JoinWith {
        name: n,
        rename: None,
    }
}

pub JoinWhere: JoinWhere = {
    "where" <fn_:Path> "is" <wn:Path> => JoinWhere {
        from_name: fn_,
        with_name: wn,
    }
}

pub View: View = {
    "view" <n:Name> <p:ViewPreds> <c:ViewColumns> => View {
        name: n,
        from: p.from,
        columns: c,
    }
}

pub ViewPreds: ViewPreds = {
    "{" "from" <n:Name> "," "}" => ViewPreds {
        from: n,
    }
}

pub ViewColumns: Vec<ViewColumn> = {
    "{" <c:(<ViewColumn> ",")+> "}" => c,
}

pub ViewColumn: ViewColumn = {
    <n:Name> ":" <t:Type> "=" <fn_:Path> "," => ViewColumn {
        name: n,
        type_: t,
        from_name: fn_,
    }
}

pub Name: String = {
    <AlphaNumeric> => <>,
}

pub AlphaNumeric: String = {
    <r"[[::alpha:]][[:alnum:]]*"> => <>.to_string(),
}

pub Path: Path = {
    <t: Name> "." <c: Name> => Path {
        table: t,
        column: c,
    }
}

pub Type: Type = {
    "Integer" => Type::Integer,
    "Float" => Type::Float,
    "String" => Type::String,
    "Date" => Type::Date,
}

